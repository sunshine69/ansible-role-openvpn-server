---
# tasks file for ansible-role-openvpn-server
- name: Install openvpn - Debian
  apt:
    name:
      - openvpn
      - python3-pip
      - python3-setuptools
    state: present
  when: ansible_os_family == 'Debian'

- name: Install openvpn - RedHat
  yum:
    name:
      - openvpn
      - python3-pip
      - python3-setuptools
    state: present
  when: ansible_os_family == 'RedHat'

- name: Install required python modules
  pip:
    name:
      - 'pyotp'
      - 'qrcode[pil]'

- name: Modify firewall to allow packet forwarding
  block:
    - name: Enable ip forwarding
      sysctl:
        name: 'net.ipv4.ip_forward'
        value: '1'

    - name: uwf - Set DEFAULT_FORWARD_POLICY="ACCEPT"
      lineinfile:
        path: /etc/default/ufw
        regexp: '^DEFAULT_FORWARD_POLICY=[^\s]*$'
        line: 'DEFAULT_FORWARD_POLICY="ACCEPT"'
      notify: reload ufw

    - name: Deploy the *nat section in ufw config
      blockinfile:
        path: /etc/ufw/before.rules
        insertafter: '^COMMIT$'
        block: |
          # NAT table rules
          *nat
          :POSTROUTING ACCEPT [0:0]
          -A POSTROUTING -s {{ (openvpn_network ~ '/' ~ openvpn_netmask) | ipaddr('net') }} -o {{ ansible_default_ipv4.interface }} -j MASQUERADE
          COMMIT

    - name: Allow everything and enable UFW
      ufw:
        state: enabled
        policy: allow

- name: Deploy easy-rsa to remote
  block:
    - name: Reset directory
      file:
        path: "{{ openvpn_script_dir|default('/usr/local/openvpn_scripts') }}/easy-rsa"
        state: absent
      when: reset_config|default('no') == 'yes'

    - name: Create openvpn_script_dir
      file:
        path: "{{ openvpn_script_dir|default('/usr/local/openvpn_scripts') }}"
        state: directory

    - name: Find all dirs
      find:
        path: '{{ role_path }}/templates/easy-rsa'
        file_type: directory
        excludes:
          - '__pycache__'
        recurse: true
      register: easy_rsa_out
      connection: local

    - name: Make sure openvpn scripts dir exist
      file:
        path: "{{ openvpn_script_dir|default('/usr/local/openvpn_scripts') }}/{{ item.path|replace(role_path ~ '/templates/', '') }}"
        state: directory
      with_items: "{{ easy_rsa_out.files }}"

    - name: Find all files
      find:
        path: '{{ role_path}}/templates/easy-rsa'
        file_type: file
        excludes:
          - '*.db'
          - '*.zip'
          - '*gz'
          - '*.tar'
          - '*.pyc'
          - '*.png'
        recurse: true
      register: easy_rsa_out
      connection: local

    - name: Deploy the easy-rsa files
      template:
        src: "{{ item.path }}"
        dest: "{{ openvpn_script_dir|default('/usr/local/openvpn_scripts') }}/{{ item.path|replace(role_path ~ '/templates/', '') }}"
        mode: preserve
      with_items: "{{ easy_rsa_out.files }}"

- name: Setup openvpn server from scratch
  block:
    - name: Gennerate server config
      shell: |
        cd {{ openvpn_script_dir|default('/usr/local/openvpn_scripts') }}/easy-rsa
        . ./vars
        RESET_OPENVPN={{ reset_config|default('no') }} ./gen-server-config-batch.sh

    - name: Enable openvpn server at default file
      lineinfile:
        path: /etc/default/openvpn
        regexp: '^AUTOSTART="all"$'
        line: 'AUTOSTART="all"'
      notify:
        - reload systemd
    - meta: flush_handlers

- name: Update openvpn server config
  template:
    src: 'easy-rsa/vpn/server.conf'
    dest: /etc/openvpn/server.conf
  notify: restart openvpn

- name: Parsing vpn users from inventory
  block:
    - shell: "{{ role_path }}/templates/easy-rsa/parse-vpn-users.py {{ vpn_users_file }}"
      register: vpn_users_file_out

    - set_fact:
        vpn_users_all: "{{ vpn_users + vpn_users_file_out.stdout|from_json|list }}"
  when: vpn_users_file is defined and vpn_users_file
  connection: local
  become: false

- name: Set-fact vpn_users_all
  set_fact:
    vpn_users_all: "{{ vpn_users }}"
  when: vpn_users_file is not defined or vpn_users_file == '' or vpn_users_file == None

- name: Create vpn users
  shell: |
    cd {{ openvpn_script_dir|default('/usr/local/openvpn_scripts') }}/easy-rsa
    ./create_user.py -u '{{ item.username }}' -email '{{ item.email }}' -U {{ vpn_reset_all_users_password|default(item.reset|default("no")) }} -state {{ item.state|default("present") }} -otp_enabled {{ item.otp_enabled|default(1) }} -auth_type {{ item.auth_type|default("local") }} -password_length {{ item.password_length|default(6) }}
  with_items: "{{ vpn_users_all|default([]) }}"
  register: create_vpn_users

- name: Parse output as list
  set_fact:
    vpn_users_out: "{{ create_vpn_users|json_query(q)|list }}"
  vars:
    q: 'results[*].stdout'

- debug: var=vpn_users_out

- name: Convert item into json
  set_fact:
    vpn_users_out_json: "{{ item|from_json }}"
  with_items: "{{ vpn_users_out }}"
  when: item and != ""
  register: vpn_users_out2

- set_fact:
    vpn_users_info: "{{ vpn_users_out2|json_query(q) }}"
  vars:
    q: 'results[*].ansible_facts.vpn_users_out_json'

- name: Create vpn users certificates
  shell: |
    cd {{ openvpn_script_dir|default('/usr/local/openvpn_scripts') }}/easy-rsa
    ./gen-vpn.sh '{{ item.username }}' {{ item.reset|default('no') }}
  with_items: '{{ vpn_users_all }}'

- name: make sure openvpn service is up
  service: name=openvpn state=started enabled=yes

# return vpn_users_info. Playbook can use it to sync remotely generated profile and qr image, and auto mailing these inforamtion to users
- debug: var=vpn_users_info
